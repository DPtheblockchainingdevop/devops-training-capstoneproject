AWSTemplateFormatVersion: 2010-09-09

Description: >
  Author - DeVesco Pierre
  Project - Udacity DevOps Capstone Project
  Creates the Kubernetes Cluster for the capstone project. Will use Green and Blue networks 

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Kubernetes Cluster Configuration"
        Parameters:
          - BootstrapArguments
          - ProjectName
          - ClusterIAMRole
          - KubeVersion
      - Label:
          default: "Project Network Configuration"
        Parameters:
          - VPCID
          - Subnets
      - Label:
          default: "Scaling Configuration"
        Parameters:
          - AutoScalingMaxSize
          - AutoScalingMinSize
          - AutoScalingDesiredCapacity
          - EKSAmiType
          - SSHKeyPairs
    ParameterLabels:
      ProjectName:
        default: "Name of the Project which will be used for the Cluster name"
      ClusterIAMRole:
        default: "IAM Role to allow the kubernetes control plane to manage AWS resources"
      KubeVersion:
        default: Desired kubernetes cluster version
      BootstrapArguments:
        default: Arguments for the bootstrap script
      VPCID:
        default: Existing VPC for the project
      Subnets:
        default: The subnets where workers can be created 
      AutoScalingDesiredCapacity:
        default: Desired capacity of the Node Auto Scaling group
      AutoScalingMaxSize:
        default: Maximum size of Node Auto Scaling group. Set to at least 1 greater than Desired capacity
      AutoScalingMinSize:
        default: Minimum size of Node Auto Scaling group.
      EKSAmiType: 
        default: AMI type for node group
      SSHKeyPairs:
        default: SSH key for node group

Parameters:
  BootstrapArguments:
    Type: String
    Default: ""
    Description: "Arguments to pass to the bootstrap script. See files/bootstrap.sh in https://github.com/awslabs/amazon-eks-ami"

  ClusterIAMRole:
    Description: The IAM Role to allow the kubernetes control plane to manage AWS resources.
    Type: String
    
  KubeVersion:
    Description: The Desired Kubernetes version for the cluster. Defaults to the latest version
    Type: String
    Default: 1.17
    AllowedValues:
      - 1.17
      - 1.16
      - 1.15
      - 1.14
    ConstraintDescription: Must be a valid Kubernetes version

  ProjectName:
    Description: An project Name that will be prefixed to resoure names
    Type: String
    AllowedPattern: (?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*
    ConstraintDescription: Project Name must match pattern (?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*
    MaxLength: 256
    MinLength: 2
  
  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: The subnets where workers can be created.

  VPCID:
    Type: AWS::EC2::VPC::Id
    Description: The VPC of the worker instances

  AutoScalingDesiredCapacity:
    Type: Number
    Description: The current number of worker nodes that the managed node group should maintain.
    MinValue: 1

  AutoScalingMaxSize:
    Type: Number
    Description: The maximum number of worker nodes that the managed node group can scale out to. Managed node groups can support up to 100 nodes by default.
    MinValue: 1
  
  AutoScalingMinSize:
    Type: Number
    Description: The minimum number of worker nodes that the managed node group can scale in to. This number must be greater than zero.
    MinValue: 1

  EKSAmiType:
    Type: String
    Description: The AMI type for your node group. GPU instance types should use the AL2_x86_64_GPU AMI type. Non-GPU instances should use the AL2_x86_64 AMI type. Arm instances should use the AL2_ARM_64 AMI type. All types use the Amazon EKS optimized Amazon Linux 2 AMI.
    Default: AL2_x86_64
    AllowedValues:
      - AL2_ARM_64
      - AL2_x86_64
      - AL2_x86_64_GPU
    ConstraintDescription: Allowed values are AL2_ARM_64 | AL2_x86_64 | AL2_x86_64_GPU
  
  SSHKeyPairs:
    Type: AWS::EC2::KeyPair::KeyName
    Description: The Amazon EC2 SSH key that provides access for SSH communication with the worker nodes in the managed node group

Resources:
  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Cluster communication with worker nodes
      VpcId: !Ref VPCID
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  NodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for all nodes in the cluster
      VpcId: !Ref VPCID
      Tags:
        - Key: !Sub kubernetes.io/cluster/${KubeCluster}
          Value: owned
        - Key: Project
          Value: !Ref ProjectName
    
  NodeSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties: 
      Description: Allow Node to communicate with each other
      FromPort: 0
      GroupId: !Ref NodeSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      ToPort: 65535

  ClusterControlPlaneSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: 
      - NodeSecurityGroup
      - ControlPlaneSecurityGroup
    Properties: 
      Description: Allow pods to communicate with the cluster API server
      FromPort: 443
      ToPort: 443
      GroupId: !Ref ControlPlaneSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref NodeSecurityGroup
  
  ControlPlaneEgressToNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroupEgress
    DependsOn: 
      - NodeSecurityGroup
      - ControlPlaneSecurityGroup
    Properties:
      Description: Allow the cluster control plane to communicate with worker Kubelet and pods
      DestinationSecurityGroupId: !Ref NodeSecurityGroup
      FromPort: 1025
      GroupId: !Ref ControlPlaneSecurityGroup
      IpProtocol: tcp
      ToPort: 65535

  ControlPlaneEgressToNodeSecurityGroupOn443:
    Type: AWS::EC2::SecurityGroupEgress
    DependsOn: 
      - NodeSecurityGroup
      - ControlPlaneSecurityGroup
    Properties:
      Description: Allow the cluster control plane to communicate with the pods running extension API servers on port 443
      DestinationSecurityGroupId: !Ref NodeSecurityGroup
      FromPort: 443
      ToPort: 443
      GroupId: !Ref ControlPlaneSecurityGroup
      IpProtocol: tcp
    
  NodeSecurityGroupFromControlPlaneIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: 
      - NodeSecurityGroup
      - ControlPlaneSecurityGroup
    Properties:
      Description: Allow worker Kubelets and pods to receive communication from the cluster control plane
      FromPort: 1025
      GroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref ControlPlaneSecurityGroup
      ToPort: 65535
  
  NodeSecurityGroupFromControlPlaneon443Ingress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: 
      - NodeSecurityGroup
      - ControlPlaneSecurityGroup
    Properties:
      Description: Allow pods running extension API servers on port 443 to receive communication from cluster control plane
      FromPort: 443
      GroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref ControlPlaneSecurityGroup
      ToPort: 443
  
  ControlPlaneEgressToInternet:
    Type: AWS::EC2::SecurityGroupEgress
    DependsOn: ControlPlaneSecurityGroup
    Properties:
      Description: Allow Internet Traffic out for initial Setup. Will disable in the future
      IpProtocol: -1
      FromPort: -1
      ToPort: -1
      CidrIp: 0.0.0.0/0
      GroupId: !Ref ControlPlaneSecurityGroup

  ControlPlaneSSHAccess:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: ControlPlaneSecurityGroup
    Properties:
      Description: Allow SSH Access from the JumpBox to all cluster machines
      FromPort: 22
      ToPort: 22
      IpProtocol: tcp
      GroupId: !Ref ControlPlaneSecurityGroup
      SourceSecurityGroupId: !Ref JumpBoxSecurityGroup

  NodeGroupSSHAccess:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: 
      - NodeSecurityGroup
      - ControlPlaneSecurityGroup
    Properties:
      Description: Allow SSH Access from the ControlPlaneSecurityGroup to all nodes
      FromPort: 22
      ToPort: 22
      IpProtocol: tcp
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref JumpBoxSecurityGroup

  JumpBoxSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: JumpBox
      GroupDescription: Security Group for the JumpBox that will be used for troubleshooting
      VpcId: !Ref VPCID
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  JumpBoxSecurityGroupforSSHon22Ingress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: JumpBoxSecurityGroup
    Properties:
      Description: Allows SSH Access from Home to the JumpBox
      FromPort: 22
      ToPort: 22
      IpProtocol: tcp
      CidrIp: 67.164.176.221/32
      GroupId: !Ref JumpBoxSecurityGroup

  JenkinsSecurityGroupfor8080Ingress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: JumpBoxSecurityGroup
    Properties:
      Description: Allows HTTP access on port 8080 for Jenkins
      FromPort: 8080
      ToPort: 8080
      IpProtocol: tcp
      CidrIp: 0.0.0.0/0
      GroupId: !Ref JumpBoxSecurityGroup

  JumpBoxSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    DependsOn: JumpBoxSecurityGroup
    Properties:
      Description: Allow JumpBox to speak to the internet
      IpProtocol: -1
      FromPort: -1
      ToPort: -1
      CidrIp: 0.0.0.0/0
      GroupId: !Ref JumpBoxSecurityGroup

  KubeCluster:
    DependsOn: ControlPlaneSecurityGroup
    Type: AWS::EKS::Cluster
    Properties:
      Name: 
        !Join 
          - ''
          - - Fn::ImportValue: !Sub '${ProjectName}'
            - '-Project'
      Version: !Ref KubeVersion
      RoleArn: !Ref ClusterIAMRole
      ResourcesVpcConfig:
        SecurityGroupIds: 
          - !Ref ControlPlaneSecurityGroup
          # - !Ref JumpBox
        SubnetIds:
          !Ref Subnets

  EKSNodeGroup:
    Type: AWS::EKS::Nodegroup 
    DependsOn:
      - KubeCluster
    Properties:
      ClusterName: !Ref KubeCluster
      NodeRole: arn:aws:iam::833142362823:role/NodeInstanceRole
      ScalingConfig:
        MinSize: !Ref AutoScalingMinSize
        MaxSize: !Ref AutoScalingMaxSize
        DesiredSize: !Ref AutoScalingDesiredCapacity
      AmiType: !Ref EKSAmiType
      InstanceTypes: 
        - t3.medium
      RemoteAccess:
        Ec2SshKey: !Ref SSHKeyPairs
        SourceSecurityGroups:
          - !Ref NodeSecurityGroup
          - !Ref JumpBoxSecurityGroup
      Subnets:
        !Ref Subnets
      Tags:
        Project: !Ref ProjectName

  JumpBoxServer:
    DependsOn: JumpBoxSecurityGroup
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.medium
      ImageId: ami-0010d386b82bc06f0
      AvailabilityZone: !Select [1, !GetAZs '']
      KeyName: !Ref SSHKeyPairs
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          DeleteOnTermination: true
          GroupSet:
            - !Ref JumpBoxSecurityGroup
          SubnetId: 
            !Select
            - 1
            - !Split
              - ','
              - 'Fn::ImportValue': !Sub '${ProjectName}-PUB-NETS'
      SourceDestCheck: true
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash
          apt-get update 
          apt install -y default-jdk apt-transport-https ca-certificates curl software-properties-common tidy 
          wget -q -O - https://pkg.jenkins.io/debian/jenkins.io.key | apt-key add -
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          sh -c 'echo deb https://pkg.jenkins.io/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list'
          add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
          apt-get update
          apt-get install -y jenkins docker-ce
          usermod -aG docker ubuntu
          usermod -aG docker jenkins
          systemctl start jenkins
          systemctl enable jenkins
          systemctl status jenkins
      Tags:
        - Key: Project
          Value: !Sub ${ProjectName}
        - Key: Name
          Value: !Sub ${ProjectName}-JumpBox 
        - Key: App 
          Value: Jenkins
        - Key: App
          Value: Docker

Outputs:
  EKSControlPlane:
    Description: Amazon EKS Control Plane Logical ID
    Value: !Ref KubeCluster
    Export:
      Name: !Sub ${ProjectName}-EKS-ControlPlane
  
  NodeSecurityGroup:
    Description: The security group for the node group
    Value: !Ref NodeSecurityGroup
    Export:
      Name: !Sub ${ProjectName}-NodeSecurityGroup
